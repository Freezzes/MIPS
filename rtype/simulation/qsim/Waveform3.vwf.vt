// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/10/2019 17:52:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rtype
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rtype_vlg_sample_tst(
	clock,
	sampler_tx
);
input  clock;
output sampler_tx;

reg sample;
time current_time;
always @(clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module rtype_vlg_check_tst (
	muxin1,
	muxin2,
	muxsel,
	read1,
	read2,
	result,
	sampler_rx
);
input [4:0] muxin1;
input [4:0] muxin2;
input [4:0] muxsel;
input [31:0] read1;
input [31:0] read2;
input [31:0] result;
input sampler_rx;

reg [4:0] muxin1_expected;
reg [4:0] muxin2_expected;
reg [4:0] muxsel_expected;
reg [31:0] read1_expected;
reg [31:0] read2_expected;
reg [31:0] result_expected;

reg [4:0] muxin1_prev;
reg [4:0] muxin2_prev;
reg [4:0] muxsel_prev;
reg [31:0] read1_prev;
reg [31:0] read2_prev;
reg [31:0] result_prev;

reg [4:0] muxin1_expected_prev;
reg [4:0] muxin2_expected_prev;
reg [4:0] muxsel_expected_prev;
reg [31:0] read1_expected_prev;
reg [31:0] read2_expected_prev;
reg [31:0] result_expected_prev;

reg [4:0] last_muxin1_exp;
reg [4:0] last_muxin2_exp;
reg [4:0] last_muxsel_exp;
reg [31:0] last_read1_exp;
reg [31:0] last_read2_exp;
reg [31:0] last_result_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	muxin1_prev = muxin1;
	muxin2_prev = muxin2;
	muxsel_prev = muxsel;
	read1_prev = read1;
	read2_prev = read2;
	result_prev = result;
end

// update expected /o prevs

always @(trigger)
begin
	muxin1_expected_prev = muxin1_expected;
	muxin2_expected_prev = muxin2_expected;
	muxsel_expected_prev = muxsel_expected;
	read1_expected_prev = read1_expected;
	read2_expected_prev = read2_expected;
	result_expected_prev = result_expected;
end


// expected muxin1[ 4 ]
initial
begin
	muxin1_expected[4] = 1'bX;
end 
// expected muxin1[ 3 ]
initial
begin
	muxin1_expected[3] = 1'bX;
end 
// expected muxin1[ 2 ]
initial
begin
	muxin1_expected[2] = 1'bX;
end 
// expected muxin1[ 1 ]
initial
begin
	muxin1_expected[1] = 1'bX;
end 
// expected muxin1[ 0 ]
initial
begin
	muxin1_expected[0] = 1'bX;
end 
// expected muxin2[ 4 ]
initial
begin
	muxin2_expected[4] = 1'bX;
end 
// expected muxin2[ 3 ]
initial
begin
	muxin2_expected[3] = 1'bX;
end 
// expected muxin2[ 2 ]
initial
begin
	muxin2_expected[2] = 1'bX;
end 
// expected muxin2[ 1 ]
initial
begin
	muxin2_expected[1] = 1'bX;
end 
// expected muxin2[ 0 ]
initial
begin
	muxin2_expected[0] = 1'bX;
end 
// expected muxsel[ 4 ]
initial
begin
	muxsel_expected[4] = 1'bX;
end 
// expected muxsel[ 3 ]
initial
begin
	muxsel_expected[3] = 1'bX;
end 
// expected muxsel[ 2 ]
initial
begin
	muxsel_expected[2] = 1'bX;
end 
// expected muxsel[ 1 ]
initial
begin
	muxsel_expected[1] = 1'bX;
end 
// expected muxsel[ 0 ]
initial
begin
	muxsel_expected[0] = 1'bX;
end 
// expected read1[ 31 ]
initial
begin
	read1_expected[31] = 1'bX;
end 
// expected read1[ 30 ]
initial
begin
	read1_expected[30] = 1'bX;
end 
// expected read1[ 29 ]
initial
begin
	read1_expected[29] = 1'bX;
end 
// expected read1[ 28 ]
initial
begin
	read1_expected[28] = 1'bX;
end 
// expected read1[ 27 ]
initial
begin
	read1_expected[27] = 1'bX;
end 
// expected read1[ 26 ]
initial
begin
	read1_expected[26] = 1'bX;
end 
// expected read1[ 25 ]
initial
begin
	read1_expected[25] = 1'bX;
end 
// expected read1[ 24 ]
initial
begin
	read1_expected[24] = 1'bX;
end 
// expected read1[ 23 ]
initial
begin
	read1_expected[23] = 1'bX;
end 
// expected read1[ 22 ]
initial
begin
	read1_expected[22] = 1'bX;
end 
// expected read1[ 21 ]
initial
begin
	read1_expected[21] = 1'bX;
end 
// expected read1[ 20 ]
initial
begin
	read1_expected[20] = 1'bX;
end 
// expected read1[ 19 ]
initial
begin
	read1_expected[19] = 1'bX;
end 
// expected read1[ 18 ]
initial
begin
	read1_expected[18] = 1'bX;
end 
// expected read1[ 17 ]
initial
begin
	read1_expected[17] = 1'bX;
end 
// expected read1[ 16 ]
initial
begin
	read1_expected[16] = 1'bX;
end 
// expected read1[ 15 ]
initial
begin
	read1_expected[15] = 1'bX;
end 
// expected read1[ 14 ]
initial
begin
	read1_expected[14] = 1'bX;
end 
// expected read1[ 13 ]
initial
begin
	read1_expected[13] = 1'bX;
end 
// expected read1[ 12 ]
initial
begin
	read1_expected[12] = 1'bX;
end 
// expected read1[ 11 ]
initial
begin
	read1_expected[11] = 1'bX;
end 
// expected read1[ 10 ]
initial
begin
	read1_expected[10] = 1'bX;
end 
// expected read1[ 9 ]
initial
begin
	read1_expected[9] = 1'bX;
end 
// expected read1[ 8 ]
initial
begin
	read1_expected[8] = 1'bX;
end 
// expected read1[ 7 ]
initial
begin
	read1_expected[7] = 1'bX;
end 
// expected read1[ 6 ]
initial
begin
	read1_expected[6] = 1'bX;
end 
// expected read1[ 5 ]
initial
begin
	read1_expected[5] = 1'bX;
end 
// expected read1[ 4 ]
initial
begin
	read1_expected[4] = 1'bX;
end 
// expected read1[ 3 ]
initial
begin
	read1_expected[3] = 1'bX;
end 
// expected read1[ 2 ]
initial
begin
	read1_expected[2] = 1'bX;
end 
// expected read1[ 1 ]
initial
begin
	read1_expected[1] = 1'bX;
end 
// expected read1[ 0 ]
initial
begin
	read1_expected[0] = 1'bX;
end 
// expected read2[ 31 ]
initial
begin
	read2_expected[31] = 1'bX;
end 
// expected read2[ 30 ]
initial
begin
	read2_expected[30] = 1'bX;
end 
// expected read2[ 29 ]
initial
begin
	read2_expected[29] = 1'bX;
end 
// expected read2[ 28 ]
initial
begin
	read2_expected[28] = 1'bX;
end 
// expected read2[ 27 ]
initial
begin
	read2_expected[27] = 1'bX;
end 
// expected read2[ 26 ]
initial
begin
	read2_expected[26] = 1'bX;
end 
// expected read2[ 25 ]
initial
begin
	read2_expected[25] = 1'bX;
end 
// expected read2[ 24 ]
initial
begin
	read2_expected[24] = 1'bX;
end 
// expected read2[ 23 ]
initial
begin
	read2_expected[23] = 1'bX;
end 
// expected read2[ 22 ]
initial
begin
	read2_expected[22] = 1'bX;
end 
// expected read2[ 21 ]
initial
begin
	read2_expected[21] = 1'bX;
end 
// expected read2[ 20 ]
initial
begin
	read2_expected[20] = 1'bX;
end 
// expected read2[ 19 ]
initial
begin
	read2_expected[19] = 1'bX;
end 
// expected read2[ 18 ]
initial
begin
	read2_expected[18] = 1'bX;
end 
// expected read2[ 17 ]
initial
begin
	read2_expected[17] = 1'bX;
end 
// expected read2[ 16 ]
initial
begin
	read2_expected[16] = 1'bX;
end 
// expected read2[ 15 ]
initial
begin
	read2_expected[15] = 1'bX;
end 
// expected read2[ 14 ]
initial
begin
	read2_expected[14] = 1'bX;
end 
// expected read2[ 13 ]
initial
begin
	read2_expected[13] = 1'bX;
end 
// expected read2[ 12 ]
initial
begin
	read2_expected[12] = 1'bX;
end 
// expected read2[ 11 ]
initial
begin
	read2_expected[11] = 1'bX;
end 
// expected read2[ 10 ]
initial
begin
	read2_expected[10] = 1'bX;
end 
// expected read2[ 9 ]
initial
begin
	read2_expected[9] = 1'bX;
end 
// expected read2[ 8 ]
initial
begin
	read2_expected[8] = 1'bX;
end 
// expected read2[ 7 ]
initial
begin
	read2_expected[7] = 1'bX;
end 
// expected read2[ 6 ]
initial
begin
	read2_expected[6] = 1'bX;
end 
// expected read2[ 5 ]
initial
begin
	read2_expected[5] = 1'bX;
end 
// expected read2[ 4 ]
initial
begin
	read2_expected[4] = 1'bX;
end 
// expected read2[ 3 ]
initial
begin
	read2_expected[3] = 1'bX;
end 
// expected read2[ 2 ]
initial
begin
	read2_expected[2] = 1'bX;
end 
// expected read2[ 1 ]
initial
begin
	read2_expected[1] = 1'bX;
end 
// expected read2[ 0 ]
initial
begin
	read2_expected[0] = 1'bX;
end 
// expected result[ 31 ]
initial
begin
	result_expected[31] = 1'bX;
end 
// expected result[ 30 ]
initial
begin
	result_expected[30] = 1'bX;
end 
// expected result[ 29 ]
initial
begin
	result_expected[29] = 1'bX;
end 
// expected result[ 28 ]
initial
begin
	result_expected[28] = 1'bX;
end 
// expected result[ 27 ]
initial
begin
	result_expected[27] = 1'bX;
end 
// expected result[ 26 ]
initial
begin
	result_expected[26] = 1'bX;
end 
// expected result[ 25 ]
initial
begin
	result_expected[25] = 1'bX;
end 
// expected result[ 24 ]
initial
begin
	result_expected[24] = 1'bX;
end 
// expected result[ 23 ]
initial
begin
	result_expected[23] = 1'bX;
end 
// expected result[ 22 ]
initial
begin
	result_expected[22] = 1'bX;
end 
// expected result[ 21 ]
initial
begin
	result_expected[21] = 1'bX;
end 
// expected result[ 20 ]
initial
begin
	result_expected[20] = 1'bX;
end 
// expected result[ 19 ]
initial
begin
	result_expected[19] = 1'bX;
end 
// expected result[ 18 ]
initial
begin
	result_expected[18] = 1'bX;
end 
// expected result[ 17 ]
initial
begin
	result_expected[17] = 1'bX;
end 
// expected result[ 16 ]
initial
begin
	result_expected[16] = 1'bX;
end 
// expected result[ 15 ]
initial
begin
	result_expected[15] = 1'bX;
end 
// expected result[ 14 ]
initial
begin
	result_expected[14] = 1'bX;
end 
// expected result[ 13 ]
initial
begin
	result_expected[13] = 1'bX;
end 
// expected result[ 12 ]
initial
begin
	result_expected[12] = 1'bX;
end 
// expected result[ 11 ]
initial
begin
	result_expected[11] = 1'bX;
end 
// expected result[ 10 ]
initial
begin
	result_expected[10] = 1'bX;
end 
// expected result[ 9 ]
initial
begin
	result_expected[9] = 1'bX;
end 
// expected result[ 8 ]
initial
begin
	result_expected[8] = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// generate trigger
always @(muxin1_expected or muxin1 or muxin2_expected or muxin2 or muxsel_expected or muxsel or read1_expected or read1 or read2_expected or read2 or result_expected or result)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected muxin1 = %b | expected muxin2 = %b | expected muxsel = %b | expected read1 = %b | expected read2 = %b | expected result = %b | ",muxin1_expected_prev,muxin2_expected_prev,muxsel_expected_prev,read1_expected_prev,read2_expected_prev,result_expected_prev);
	$display("| real muxin1 = %b | real muxin2 = %b | real muxsel = %b | real read1 = %b | real read2 = %b | real result = %b | ",muxin1_prev,muxin2_prev,muxsel_prev,read1_prev,read2_prev,result_prev);
`endif
	if (
		( muxin1_expected_prev[0] !== 1'bx ) && ( muxin1_prev[0] !== muxin1_expected_prev[0] )
		&& ((muxin1_expected_prev[0] !== last_muxin1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxin1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxin1_expected_prev);
		$display ("     Real value = %b", muxin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_muxin1_exp[0] = muxin1_expected_prev[0];
	end
	if (
		( muxin1_expected_prev[1] !== 1'bx ) && ( muxin1_prev[1] !== muxin1_expected_prev[1] )
		&& ((muxin1_expected_prev[1] !== last_muxin1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxin1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxin1_expected_prev);
		$display ("     Real value = %b", muxin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_muxin1_exp[1] = muxin1_expected_prev[1];
	end
	if (
		( muxin1_expected_prev[2] !== 1'bx ) && ( muxin1_prev[2] !== muxin1_expected_prev[2] )
		&& ((muxin1_expected_prev[2] !== last_muxin1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxin1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxin1_expected_prev);
		$display ("     Real value = %b", muxin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_muxin1_exp[2] = muxin1_expected_prev[2];
	end
	if (
		( muxin1_expected_prev[3] !== 1'bx ) && ( muxin1_prev[3] !== muxin1_expected_prev[3] )
		&& ((muxin1_expected_prev[3] !== last_muxin1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxin1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxin1_expected_prev);
		$display ("     Real value = %b", muxin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_muxin1_exp[3] = muxin1_expected_prev[3];
	end
	if (
		( muxin1_expected_prev[4] !== 1'bx ) && ( muxin1_prev[4] !== muxin1_expected_prev[4] )
		&& ((muxin1_expected_prev[4] !== last_muxin1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxin1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxin1_expected_prev);
		$display ("     Real value = %b", muxin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_muxin1_exp[4] = muxin1_expected_prev[4];
	end
	if (
		( muxin2_expected_prev[0] !== 1'bx ) && ( muxin2_prev[0] !== muxin2_expected_prev[0] )
		&& ((muxin2_expected_prev[0] !== last_muxin2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxin2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxin2_expected_prev);
		$display ("     Real value = %b", muxin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_muxin2_exp[0] = muxin2_expected_prev[0];
	end
	if (
		( muxin2_expected_prev[1] !== 1'bx ) && ( muxin2_prev[1] !== muxin2_expected_prev[1] )
		&& ((muxin2_expected_prev[1] !== last_muxin2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxin2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxin2_expected_prev);
		$display ("     Real value = %b", muxin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_muxin2_exp[1] = muxin2_expected_prev[1];
	end
	if (
		( muxin2_expected_prev[2] !== 1'bx ) && ( muxin2_prev[2] !== muxin2_expected_prev[2] )
		&& ((muxin2_expected_prev[2] !== last_muxin2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxin2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxin2_expected_prev);
		$display ("     Real value = %b", muxin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_muxin2_exp[2] = muxin2_expected_prev[2];
	end
	if (
		( muxin2_expected_prev[3] !== 1'bx ) && ( muxin2_prev[3] !== muxin2_expected_prev[3] )
		&& ((muxin2_expected_prev[3] !== last_muxin2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxin2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxin2_expected_prev);
		$display ("     Real value = %b", muxin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_muxin2_exp[3] = muxin2_expected_prev[3];
	end
	if (
		( muxin2_expected_prev[4] !== 1'bx ) && ( muxin2_prev[4] !== muxin2_expected_prev[4] )
		&& ((muxin2_expected_prev[4] !== last_muxin2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxin2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxin2_expected_prev);
		$display ("     Real value = %b", muxin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_muxin2_exp[4] = muxin2_expected_prev[4];
	end
	if (
		( muxsel_expected_prev[0] !== 1'bx ) && ( muxsel_prev[0] !== muxsel_expected_prev[0] )
		&& ((muxsel_expected_prev[0] !== last_muxsel_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxsel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxsel_expected_prev);
		$display ("     Real value = %b", muxsel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_muxsel_exp[0] = muxsel_expected_prev[0];
	end
	if (
		( muxsel_expected_prev[1] !== 1'bx ) && ( muxsel_prev[1] !== muxsel_expected_prev[1] )
		&& ((muxsel_expected_prev[1] !== last_muxsel_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxsel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxsel_expected_prev);
		$display ("     Real value = %b", muxsel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_muxsel_exp[1] = muxsel_expected_prev[1];
	end
	if (
		( muxsel_expected_prev[2] !== 1'bx ) && ( muxsel_prev[2] !== muxsel_expected_prev[2] )
		&& ((muxsel_expected_prev[2] !== last_muxsel_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxsel[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxsel_expected_prev);
		$display ("     Real value = %b", muxsel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_muxsel_exp[2] = muxsel_expected_prev[2];
	end
	if (
		( muxsel_expected_prev[3] !== 1'bx ) && ( muxsel_prev[3] !== muxsel_expected_prev[3] )
		&& ((muxsel_expected_prev[3] !== last_muxsel_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxsel[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxsel_expected_prev);
		$display ("     Real value = %b", muxsel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_muxsel_exp[3] = muxsel_expected_prev[3];
	end
	if (
		( muxsel_expected_prev[4] !== 1'bx ) && ( muxsel_prev[4] !== muxsel_expected_prev[4] )
		&& ((muxsel_expected_prev[4] !== last_muxsel_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port muxsel[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", muxsel_expected_prev);
		$display ("     Real value = %b", muxsel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_muxsel_exp[4] = muxsel_expected_prev[4];
	end
	if (
		( read1_expected_prev[0] !== 1'bx ) && ( read1_prev[0] !== read1_expected_prev[0] )
		&& ((read1_expected_prev[0] !== last_read1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[0] = read1_expected_prev[0];
	end
	if (
		( read1_expected_prev[1] !== 1'bx ) && ( read1_prev[1] !== read1_expected_prev[1] )
		&& ((read1_expected_prev[1] !== last_read1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[1] = read1_expected_prev[1];
	end
	if (
		( read1_expected_prev[2] !== 1'bx ) && ( read1_prev[2] !== read1_expected_prev[2] )
		&& ((read1_expected_prev[2] !== last_read1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[2] = read1_expected_prev[2];
	end
	if (
		( read1_expected_prev[3] !== 1'bx ) && ( read1_prev[3] !== read1_expected_prev[3] )
		&& ((read1_expected_prev[3] !== last_read1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[3] = read1_expected_prev[3];
	end
	if (
		( read1_expected_prev[4] !== 1'bx ) && ( read1_prev[4] !== read1_expected_prev[4] )
		&& ((read1_expected_prev[4] !== last_read1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[4] = read1_expected_prev[4];
	end
	if (
		( read1_expected_prev[5] !== 1'bx ) && ( read1_prev[5] !== read1_expected_prev[5] )
		&& ((read1_expected_prev[5] !== last_read1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[5] = read1_expected_prev[5];
	end
	if (
		( read1_expected_prev[6] !== 1'bx ) && ( read1_prev[6] !== read1_expected_prev[6] )
		&& ((read1_expected_prev[6] !== last_read1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[6] = read1_expected_prev[6];
	end
	if (
		( read1_expected_prev[7] !== 1'bx ) && ( read1_prev[7] !== read1_expected_prev[7] )
		&& ((read1_expected_prev[7] !== last_read1_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[7] = read1_expected_prev[7];
	end
	if (
		( read1_expected_prev[8] !== 1'bx ) && ( read1_prev[8] !== read1_expected_prev[8] )
		&& ((read1_expected_prev[8] !== last_read1_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[8] = read1_expected_prev[8];
	end
	if (
		( read1_expected_prev[9] !== 1'bx ) && ( read1_prev[9] !== read1_expected_prev[9] )
		&& ((read1_expected_prev[9] !== last_read1_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[9] = read1_expected_prev[9];
	end
	if (
		( read1_expected_prev[10] !== 1'bx ) && ( read1_prev[10] !== read1_expected_prev[10] )
		&& ((read1_expected_prev[10] !== last_read1_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[10] = read1_expected_prev[10];
	end
	if (
		( read1_expected_prev[11] !== 1'bx ) && ( read1_prev[11] !== read1_expected_prev[11] )
		&& ((read1_expected_prev[11] !== last_read1_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[11] = read1_expected_prev[11];
	end
	if (
		( read1_expected_prev[12] !== 1'bx ) && ( read1_prev[12] !== read1_expected_prev[12] )
		&& ((read1_expected_prev[12] !== last_read1_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[12] = read1_expected_prev[12];
	end
	if (
		( read1_expected_prev[13] !== 1'bx ) && ( read1_prev[13] !== read1_expected_prev[13] )
		&& ((read1_expected_prev[13] !== last_read1_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[13] = read1_expected_prev[13];
	end
	if (
		( read1_expected_prev[14] !== 1'bx ) && ( read1_prev[14] !== read1_expected_prev[14] )
		&& ((read1_expected_prev[14] !== last_read1_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[14] = read1_expected_prev[14];
	end
	if (
		( read1_expected_prev[15] !== 1'bx ) && ( read1_prev[15] !== read1_expected_prev[15] )
		&& ((read1_expected_prev[15] !== last_read1_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[15] = read1_expected_prev[15];
	end
	if (
		( read1_expected_prev[16] !== 1'bx ) && ( read1_prev[16] !== read1_expected_prev[16] )
		&& ((read1_expected_prev[16] !== last_read1_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[16] = read1_expected_prev[16];
	end
	if (
		( read1_expected_prev[17] !== 1'bx ) && ( read1_prev[17] !== read1_expected_prev[17] )
		&& ((read1_expected_prev[17] !== last_read1_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[17] = read1_expected_prev[17];
	end
	if (
		( read1_expected_prev[18] !== 1'bx ) && ( read1_prev[18] !== read1_expected_prev[18] )
		&& ((read1_expected_prev[18] !== last_read1_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[18] = read1_expected_prev[18];
	end
	if (
		( read1_expected_prev[19] !== 1'bx ) && ( read1_prev[19] !== read1_expected_prev[19] )
		&& ((read1_expected_prev[19] !== last_read1_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[19] = read1_expected_prev[19];
	end
	if (
		( read1_expected_prev[20] !== 1'bx ) && ( read1_prev[20] !== read1_expected_prev[20] )
		&& ((read1_expected_prev[20] !== last_read1_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[20] = read1_expected_prev[20];
	end
	if (
		( read1_expected_prev[21] !== 1'bx ) && ( read1_prev[21] !== read1_expected_prev[21] )
		&& ((read1_expected_prev[21] !== last_read1_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[21] = read1_expected_prev[21];
	end
	if (
		( read1_expected_prev[22] !== 1'bx ) && ( read1_prev[22] !== read1_expected_prev[22] )
		&& ((read1_expected_prev[22] !== last_read1_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[22] = read1_expected_prev[22];
	end
	if (
		( read1_expected_prev[23] !== 1'bx ) && ( read1_prev[23] !== read1_expected_prev[23] )
		&& ((read1_expected_prev[23] !== last_read1_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[23] = read1_expected_prev[23];
	end
	if (
		( read1_expected_prev[24] !== 1'bx ) && ( read1_prev[24] !== read1_expected_prev[24] )
		&& ((read1_expected_prev[24] !== last_read1_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[24] = read1_expected_prev[24];
	end
	if (
		( read1_expected_prev[25] !== 1'bx ) && ( read1_prev[25] !== read1_expected_prev[25] )
		&& ((read1_expected_prev[25] !== last_read1_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[25] = read1_expected_prev[25];
	end
	if (
		( read1_expected_prev[26] !== 1'bx ) && ( read1_prev[26] !== read1_expected_prev[26] )
		&& ((read1_expected_prev[26] !== last_read1_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[26] = read1_expected_prev[26];
	end
	if (
		( read1_expected_prev[27] !== 1'bx ) && ( read1_prev[27] !== read1_expected_prev[27] )
		&& ((read1_expected_prev[27] !== last_read1_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[27] = read1_expected_prev[27];
	end
	if (
		( read1_expected_prev[28] !== 1'bx ) && ( read1_prev[28] !== read1_expected_prev[28] )
		&& ((read1_expected_prev[28] !== last_read1_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[28] = read1_expected_prev[28];
	end
	if (
		( read1_expected_prev[29] !== 1'bx ) && ( read1_prev[29] !== read1_expected_prev[29] )
		&& ((read1_expected_prev[29] !== last_read1_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[29] = read1_expected_prev[29];
	end
	if (
		( read1_expected_prev[30] !== 1'bx ) && ( read1_prev[30] !== read1_expected_prev[30] )
		&& ((read1_expected_prev[30] !== last_read1_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[30] = read1_expected_prev[30];
	end
	if (
		( read1_expected_prev[31] !== 1'bx ) && ( read1_prev[31] !== read1_expected_prev[31] )
		&& ((read1_expected_prev[31] !== last_read1_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read1_expected_prev);
		$display ("     Real value = %b", read1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_read1_exp[31] = read1_expected_prev[31];
	end
	if (
		( read2_expected_prev[0] !== 1'bx ) && ( read2_prev[0] !== read2_expected_prev[0] )
		&& ((read2_expected_prev[0] !== last_read2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[0] = read2_expected_prev[0];
	end
	if (
		( read2_expected_prev[1] !== 1'bx ) && ( read2_prev[1] !== read2_expected_prev[1] )
		&& ((read2_expected_prev[1] !== last_read2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[1] = read2_expected_prev[1];
	end
	if (
		( read2_expected_prev[2] !== 1'bx ) && ( read2_prev[2] !== read2_expected_prev[2] )
		&& ((read2_expected_prev[2] !== last_read2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[2] = read2_expected_prev[2];
	end
	if (
		( read2_expected_prev[3] !== 1'bx ) && ( read2_prev[3] !== read2_expected_prev[3] )
		&& ((read2_expected_prev[3] !== last_read2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[3] = read2_expected_prev[3];
	end
	if (
		( read2_expected_prev[4] !== 1'bx ) && ( read2_prev[4] !== read2_expected_prev[4] )
		&& ((read2_expected_prev[4] !== last_read2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[4] = read2_expected_prev[4];
	end
	if (
		( read2_expected_prev[5] !== 1'bx ) && ( read2_prev[5] !== read2_expected_prev[5] )
		&& ((read2_expected_prev[5] !== last_read2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[5] = read2_expected_prev[5];
	end
	if (
		( read2_expected_prev[6] !== 1'bx ) && ( read2_prev[6] !== read2_expected_prev[6] )
		&& ((read2_expected_prev[6] !== last_read2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[6] = read2_expected_prev[6];
	end
	if (
		( read2_expected_prev[7] !== 1'bx ) && ( read2_prev[7] !== read2_expected_prev[7] )
		&& ((read2_expected_prev[7] !== last_read2_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[7] = read2_expected_prev[7];
	end
	if (
		( read2_expected_prev[8] !== 1'bx ) && ( read2_prev[8] !== read2_expected_prev[8] )
		&& ((read2_expected_prev[8] !== last_read2_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[8] = read2_expected_prev[8];
	end
	if (
		( read2_expected_prev[9] !== 1'bx ) && ( read2_prev[9] !== read2_expected_prev[9] )
		&& ((read2_expected_prev[9] !== last_read2_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[9] = read2_expected_prev[9];
	end
	if (
		( read2_expected_prev[10] !== 1'bx ) && ( read2_prev[10] !== read2_expected_prev[10] )
		&& ((read2_expected_prev[10] !== last_read2_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[10] = read2_expected_prev[10];
	end
	if (
		( read2_expected_prev[11] !== 1'bx ) && ( read2_prev[11] !== read2_expected_prev[11] )
		&& ((read2_expected_prev[11] !== last_read2_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[11] = read2_expected_prev[11];
	end
	if (
		( read2_expected_prev[12] !== 1'bx ) && ( read2_prev[12] !== read2_expected_prev[12] )
		&& ((read2_expected_prev[12] !== last_read2_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[12] = read2_expected_prev[12];
	end
	if (
		( read2_expected_prev[13] !== 1'bx ) && ( read2_prev[13] !== read2_expected_prev[13] )
		&& ((read2_expected_prev[13] !== last_read2_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[13] = read2_expected_prev[13];
	end
	if (
		( read2_expected_prev[14] !== 1'bx ) && ( read2_prev[14] !== read2_expected_prev[14] )
		&& ((read2_expected_prev[14] !== last_read2_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[14] = read2_expected_prev[14];
	end
	if (
		( read2_expected_prev[15] !== 1'bx ) && ( read2_prev[15] !== read2_expected_prev[15] )
		&& ((read2_expected_prev[15] !== last_read2_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[15] = read2_expected_prev[15];
	end
	if (
		( read2_expected_prev[16] !== 1'bx ) && ( read2_prev[16] !== read2_expected_prev[16] )
		&& ((read2_expected_prev[16] !== last_read2_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[16] = read2_expected_prev[16];
	end
	if (
		( read2_expected_prev[17] !== 1'bx ) && ( read2_prev[17] !== read2_expected_prev[17] )
		&& ((read2_expected_prev[17] !== last_read2_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[17] = read2_expected_prev[17];
	end
	if (
		( read2_expected_prev[18] !== 1'bx ) && ( read2_prev[18] !== read2_expected_prev[18] )
		&& ((read2_expected_prev[18] !== last_read2_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[18] = read2_expected_prev[18];
	end
	if (
		( read2_expected_prev[19] !== 1'bx ) && ( read2_prev[19] !== read2_expected_prev[19] )
		&& ((read2_expected_prev[19] !== last_read2_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[19] = read2_expected_prev[19];
	end
	if (
		( read2_expected_prev[20] !== 1'bx ) && ( read2_prev[20] !== read2_expected_prev[20] )
		&& ((read2_expected_prev[20] !== last_read2_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[20] = read2_expected_prev[20];
	end
	if (
		( read2_expected_prev[21] !== 1'bx ) && ( read2_prev[21] !== read2_expected_prev[21] )
		&& ((read2_expected_prev[21] !== last_read2_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[21] = read2_expected_prev[21];
	end
	if (
		( read2_expected_prev[22] !== 1'bx ) && ( read2_prev[22] !== read2_expected_prev[22] )
		&& ((read2_expected_prev[22] !== last_read2_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[22] = read2_expected_prev[22];
	end
	if (
		( read2_expected_prev[23] !== 1'bx ) && ( read2_prev[23] !== read2_expected_prev[23] )
		&& ((read2_expected_prev[23] !== last_read2_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[23] = read2_expected_prev[23];
	end
	if (
		( read2_expected_prev[24] !== 1'bx ) && ( read2_prev[24] !== read2_expected_prev[24] )
		&& ((read2_expected_prev[24] !== last_read2_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[24] = read2_expected_prev[24];
	end
	if (
		( read2_expected_prev[25] !== 1'bx ) && ( read2_prev[25] !== read2_expected_prev[25] )
		&& ((read2_expected_prev[25] !== last_read2_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[25] = read2_expected_prev[25];
	end
	if (
		( read2_expected_prev[26] !== 1'bx ) && ( read2_prev[26] !== read2_expected_prev[26] )
		&& ((read2_expected_prev[26] !== last_read2_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[26] = read2_expected_prev[26];
	end
	if (
		( read2_expected_prev[27] !== 1'bx ) && ( read2_prev[27] !== read2_expected_prev[27] )
		&& ((read2_expected_prev[27] !== last_read2_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[27] = read2_expected_prev[27];
	end
	if (
		( read2_expected_prev[28] !== 1'bx ) && ( read2_prev[28] !== read2_expected_prev[28] )
		&& ((read2_expected_prev[28] !== last_read2_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[28] = read2_expected_prev[28];
	end
	if (
		( read2_expected_prev[29] !== 1'bx ) && ( read2_prev[29] !== read2_expected_prev[29] )
		&& ((read2_expected_prev[29] !== last_read2_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[29] = read2_expected_prev[29];
	end
	if (
		( read2_expected_prev[30] !== 1'bx ) && ( read2_prev[30] !== read2_expected_prev[30] )
		&& ((read2_expected_prev[30] !== last_read2_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[30] = read2_expected_prev[30];
	end
	if (
		( read2_expected_prev[31] !== 1'bx ) && ( read2_prev[31] !== read2_expected_prev[31] )
		&& ((read2_expected_prev[31] !== last_read2_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read2_expected_prev);
		$display ("     Real value = %b", read2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_read2_exp[31] = read2_expected_prev[31];
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( result_expected_prev[8] !== 1'bx ) && ( result_prev[8] !== result_expected_prev[8] )
		&& ((result_expected_prev[8] !== last_result_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[8] = result_expected_prev[8];
	end
	if (
		( result_expected_prev[9] !== 1'bx ) && ( result_prev[9] !== result_expected_prev[9] )
		&& ((result_expected_prev[9] !== last_result_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[9] = result_expected_prev[9];
	end
	if (
		( result_expected_prev[10] !== 1'bx ) && ( result_prev[10] !== result_expected_prev[10] )
		&& ((result_expected_prev[10] !== last_result_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[10] = result_expected_prev[10];
	end
	if (
		( result_expected_prev[11] !== 1'bx ) && ( result_prev[11] !== result_expected_prev[11] )
		&& ((result_expected_prev[11] !== last_result_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[11] = result_expected_prev[11];
	end
	if (
		( result_expected_prev[12] !== 1'bx ) && ( result_prev[12] !== result_expected_prev[12] )
		&& ((result_expected_prev[12] !== last_result_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[12] = result_expected_prev[12];
	end
	if (
		( result_expected_prev[13] !== 1'bx ) && ( result_prev[13] !== result_expected_prev[13] )
		&& ((result_expected_prev[13] !== last_result_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[13] = result_expected_prev[13];
	end
	if (
		( result_expected_prev[14] !== 1'bx ) && ( result_prev[14] !== result_expected_prev[14] )
		&& ((result_expected_prev[14] !== last_result_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[14] = result_expected_prev[14];
	end
	if (
		( result_expected_prev[15] !== 1'bx ) && ( result_prev[15] !== result_expected_prev[15] )
		&& ((result_expected_prev[15] !== last_result_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[15] = result_expected_prev[15];
	end
	if (
		( result_expected_prev[16] !== 1'bx ) && ( result_prev[16] !== result_expected_prev[16] )
		&& ((result_expected_prev[16] !== last_result_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[16] = result_expected_prev[16];
	end
	if (
		( result_expected_prev[17] !== 1'bx ) && ( result_prev[17] !== result_expected_prev[17] )
		&& ((result_expected_prev[17] !== last_result_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[17] = result_expected_prev[17];
	end
	if (
		( result_expected_prev[18] !== 1'bx ) && ( result_prev[18] !== result_expected_prev[18] )
		&& ((result_expected_prev[18] !== last_result_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[18] = result_expected_prev[18];
	end
	if (
		( result_expected_prev[19] !== 1'bx ) && ( result_prev[19] !== result_expected_prev[19] )
		&& ((result_expected_prev[19] !== last_result_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[19] = result_expected_prev[19];
	end
	if (
		( result_expected_prev[20] !== 1'bx ) && ( result_prev[20] !== result_expected_prev[20] )
		&& ((result_expected_prev[20] !== last_result_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[20] = result_expected_prev[20];
	end
	if (
		( result_expected_prev[21] !== 1'bx ) && ( result_prev[21] !== result_expected_prev[21] )
		&& ((result_expected_prev[21] !== last_result_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[21] = result_expected_prev[21];
	end
	if (
		( result_expected_prev[22] !== 1'bx ) && ( result_prev[22] !== result_expected_prev[22] )
		&& ((result_expected_prev[22] !== last_result_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[22] = result_expected_prev[22];
	end
	if (
		( result_expected_prev[23] !== 1'bx ) && ( result_prev[23] !== result_expected_prev[23] )
		&& ((result_expected_prev[23] !== last_result_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[23] = result_expected_prev[23];
	end
	if (
		( result_expected_prev[24] !== 1'bx ) && ( result_prev[24] !== result_expected_prev[24] )
		&& ((result_expected_prev[24] !== last_result_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[24] = result_expected_prev[24];
	end
	if (
		( result_expected_prev[25] !== 1'bx ) && ( result_prev[25] !== result_expected_prev[25] )
		&& ((result_expected_prev[25] !== last_result_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[25] = result_expected_prev[25];
	end
	if (
		( result_expected_prev[26] !== 1'bx ) && ( result_prev[26] !== result_expected_prev[26] )
		&& ((result_expected_prev[26] !== last_result_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[26] = result_expected_prev[26];
	end
	if (
		( result_expected_prev[27] !== 1'bx ) && ( result_prev[27] !== result_expected_prev[27] )
		&& ((result_expected_prev[27] !== last_result_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[27] = result_expected_prev[27];
	end
	if (
		( result_expected_prev[28] !== 1'bx ) && ( result_prev[28] !== result_expected_prev[28] )
		&& ((result_expected_prev[28] !== last_result_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[28] = result_expected_prev[28];
	end
	if (
		( result_expected_prev[29] !== 1'bx ) && ( result_prev[29] !== result_expected_prev[29] )
		&& ((result_expected_prev[29] !== last_result_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[29] = result_expected_prev[29];
	end
	if (
		( result_expected_prev[30] !== 1'bx ) && ( result_prev[30] !== result_expected_prev[30] )
		&& ((result_expected_prev[30] !== last_result_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[30] = result_expected_prev[30];
	end
	if (
		( result_expected_prev[31] !== 1'bx ) && ( result_prev[31] !== result_expected_prev[31] )
		&& ((result_expected_prev[31] !== last_result_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[31] = result_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module rtype_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
// wires                                               
wire [4:0] muxin1;
wire [4:0] muxin2;
wire [4:0] muxsel;
wire [31:0] read1;
wire [31:0] read2;
wire [31:0] result;

wire sampler;                             

// assign statements (if any)                          
rtype i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.muxin1(muxin1),
	.muxin2(muxin2),
	.muxsel(muxsel),
	.read1(read1),
	.read2(read2),
	.result(result)
);

// clock
initial
begin
	repeat(14)
	begin
		clock = 1'b0;
		clock = #35000 1'b1;
		# 35000;
	end
	clock = 1'b0;
end 

rtype_vlg_sample_tst tb_sample (
	.clock(clock),
	.sampler_tx(sampler)
);

rtype_vlg_check_tst tb_out(
	.muxin1(muxin1),
	.muxin2(muxin2),
	.muxsel(muxsel),
	.read1(read1),
	.read2(read2),
	.result(result),
	.sampler_rx(sampler)
);
endmodule

